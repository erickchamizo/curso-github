Configurações Globais do Git:

# Configurar o nome de usuário global
git config --global user.name "Erick Chamizo"

# Configurar o e-mail global
git config --global user.email "erickchamizos@gmail.com"

# Configurar o editor de texto global (por exemplo, vim)
git config --global core.editor vim


Verificar Configurações:

# Verificar o nome de usuário configurado
git config user.name

# Verificar o e-mail configurado
git config user.email


Listar Todas as Configurações:

# Listar todas as configurações do Git
git config --list
# Resultado esperado:
# user.name=Erick Chamizo
# user.email=erickchamizos@gmail.com
# core.editor=vim


Gerenciamento de Projetos no Git:

# Criar uma pasta para armazenar projetos (exemplo: curso-git)
mkdir curso-git

# Inicializar um repositório Git dentro da pasta do projeto
git init


Criação do Primeiro Arquivo:

# Criar o primeiro arquivo usando um editor de texto (exemplo: vim)
vim Readme.md


Esses comandos fornecem uma sequência lógica para configurar o ambiente global do Git, verificar as configurações,
listar informações globais e iniciar um novo projeto com a criação de um arquivo Readme.md. Certifique-se de ajustar
os comandos conforme necessário para atender às suas preferências e requisitos específicos.



File Status Lifecycle do GIT


O ciclo de vida do status de um arquivo no Git descreve as diferentes etapas pelas quais um arquivo passa ao ser gerenciado por esse sistema de controle de versão. Aqui estão as principais fases do ciclo de vida do status dos arquivos no Git:

#Untracked (Não Rastreado):
Um arquivo que ainda não foi adicionado ao repositório Git é considerado não rastreado.
O Git não monitora ou mantém o controle de alterações nesses arquivos.

#Staged (Preparado):
Um arquivo que foi marcado para ser incluído no próximo commit é considerado preparado ou "staged".
Isso é feito usando o comando git add [nome do arquivo] para adicionar alterações específicas ou git add . para adicionar todas as alterações.

#Unmodified (Não Modificado):
Após um commit, os arquivos entram no estado não modificado.
Isso significa que os arquivos no diretório de trabalho são iguais à versão do repositório.

#Modified (Modificado):
Quando você faz alterações em um arquivo que já está no repositório, ele entra no estado modificado.
O Git reconhece que o arquivo foi alterado, mas essas alterações ainda não foram marcadas para o próximo commit.

#Staged (Preparado):
Se você editar um arquivo modificado e o marcar novamente usando git add, ele volta ao estado preparado.
Isso significa que as alterações foram selecionadas para serem incluídas no próximo commit.

#Committed (Cometido):
Após executar git commit, as alterações preparadas são salvas no repositório como uma nova revisão.
O estado do arquivo volta a ser não modificado, e o ciclo recomeça.

Durante essas transições, você pode usar comandos como git status para verificar o estado atual dos seus arquivos e git diff para ver as diferenças 
entre as versões. Essas operações fazem parte do fluxo de trabalho do Git para rastrear e gerenciar as mudanças em seus projetos.


69262 - [ Gera PE ] - Correções de Vulnerabilidades NPVMPW19AS01 / NPVMPW19AS02 NPVMPW19DC01
69298 - [ Gera PE ] - Correções de Vulnerabilidades NPVMPW19AS03 / NPVMPW19AS04 / NPVMPW19DC02
69302 - [ Gera PE ] - Correções de Vulnerabilidades NPVMPW19AS05 / NPVMPW19QA01
 
